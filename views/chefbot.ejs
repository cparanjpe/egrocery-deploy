<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600&display=swap" rel="stylesheet">
    <style>
        /* Reset some default styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Set fonts */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f7f7f7;
        }

        /* Header styles */
        header {
            background-color: #147c53;
            color: white;
            font-size: 24px;
            padding: 20px;
            text-align: center;
            margin-bottom: 20px;
        }

        /* Main container */
        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: white;
            border: 1px solid #ccc;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        /* Tags container */
        .tags-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 20px;
        }

        /* Tag styles */
        .tag {
            background-color: #147c53;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }

        /* Form styles */
        form {
            margin-bottom: 20px;
        }

        input[type="text"] {
            padding: 8px;
            width: 70%;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-right: 10px;
        }

        button[type="button"],
        button[type="submit"] {
            background-color: #147c53;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button[type="button"]:hover,
        button[type="submit"]:hover {
            background-color: #0d5c3e;
        }
        @keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.recipe-card {
    background-color: #f9f9f9;
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    animation: fadeIn 0.5s ease-in-out; /* Add animation to recipe card */
}


        .recipe-card h4 {
            margin: 0;
            color: #147c53;
            font-size: 18px;
        }

        .recipes-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            grid-gap: 20px;
        }
        .popup {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
        }

        .popup-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
        }


        

    </style>

</head>
<body>
    <header>
        <p>Farm Flavor</p>
        <p>Welcome to ChefBot</p>
    </header>

    <div class="container">
        <div class="tags-container" id="tagsContainer"></div>

        <form id="userInputForm">
            <label for="item">Enter Ingredient:</label>
            <input type="text" id="item" name="item">
            <button type="button" id="addButton">Add</button>
            <button type="button" id="submitButton">Submit</button>
        </form>

        <div id="recommendedRecipes"></div>
    </div>

    <!-- Popup div -->
    <div class="popup" id="popup">
        <div id="popupContent" class="popup-content">
            <h2 id="recipeName"></h2>
            <p id="recipeInfo"></p>
            <span class="close-btn" onclick="closePopup()">Ã—</span>
        </div>
    </div>
      
    
    <script>
        const tagsContainer = document.getElementById('tagsContainer');
        const userInputForm = document.getElementById('userInputForm');
        const itemInput = document.getElementById('item');
        const addButton = document.getElementById('addButton');
        const submitButton = document.getElementById('submitButton');
        let ingredients = [];

        addButton.addEventListener('click', () => {
            const ingredient = itemInput.value.trim();
            if (ingredient) {
                ingredients.push(ingredient);
                renderTags();
                itemInput.value = '';
            }
        });

        function renderTags() {
            tagsContainer.innerHTML = '';
            ingredients.forEach((ingredient, index) => {
                const tag = document.createElement('div');
                tag.classList.add('tag');
                tag.textContent = ingredient;
                tag.addEventListener('click', () => {
                    ingredients.splice(index, 1);
                    renderTags();
                });
                tagsContainer.appendChild(tag);
            });
        }

        submitButton.addEventListener('click', () => {
            if (ingredients.length > 0) {
                fetch('http://localhost:5000/recommend_recipe', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ingredients })
                })
                .then(response => response.json())
                .then(data => {
                    displayRecommendedRecipes(data.recipe);
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred. Please try again.');
                });

                ingredients = [];
                renderTags();
            } else {
                alert('Please add at least one ingredient.');
            }
        });

        function displayRecommendedRecipes(recipes) {
            const recommendedRecipesContainer = document.getElementById('recommendedRecipes');
            recommendedRecipesContainer.innerHTML = '';

            if (recipes.length > 0) {
                const heading = document.createElement('h3');
                heading.textContent = 'Recommended Recipes:';
                recommendedRecipesContainer.appendChild(heading);

                const recipesContainer = document.createElement('div');
                recipesContainer.classList.add('recipes-container');

                for (let i = 0; i < Math.min(3, recipes.length); i++) {
                    const recipeButton = document.createElement('button');
                    recipeButton.textContent = recipes[i];
                    recipeButton.id = recipes[i]; // Set button id to recipe name
                    recipeButton.classList.add('recipe-button'); // Add a class for styling
                    recipeButton.addEventListener('click', () => {
                        openPopup(recipes[i]);
                    });

                    recipesContainer.appendChild(recipeButton);
                }

                recommendedRecipesContainer.appendChild(recipesContainer);
            } else {
                const message = document.createElement('p');
                message.textContent = 'No recipes found.';
                recommendedRecipesContainer.appendChild(message);
            }
        }

        function openPopup(recipeName) {
            // Make the API call with the recipeName
            fetch('http://localhost:5000/recipe?name=' + encodeURIComponent(recipeName))
                .then(response => response.json())
                .then(data => {
                    const popup = document.getElementById('popup');
                    const recipeNameElement = document.getElementById('recipeName');
                    const recipeInfoElement = document.getElementById('recipeInfo');

                    recipeNameElement.textContent = recipeName;
                    recipeInfoElement.textContent = data.recipe;

                    popup.style.display = 'block';
                })
                .catch(error => {
                    console.error('Error fetching recipe:', error);
                    alert('An error occurred while fetching the recipe.');
                });
        }

        function closePopup() {
            const popup = document.getElementById('popup');
            popup.style.display = 'none';
        }
    </script>
</body>
</html>
